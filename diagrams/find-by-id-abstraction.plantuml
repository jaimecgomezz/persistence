activate Client
activate "User (Entity)"
activate "UserRepository (Repository)"
activate "SetterTransformer (Transformer)"
activate Engine
activate "Selection (Operation)"
activate "Filter (Capability)"
activate Driver

Client->Driver: new(db) 
Client<--Driver: driver 
Client->Engine: new("users", driver)
Client<--Engine: engine
Client->"SetterTransformer (Transformer)": new(User)
Client<--"SetterTransformer (Transformer)": transformer
Client->"UserRepository (Repository)": new(engine, transformer)
Client<--"UserRepository (Repository)": repository
Client->"UserRepository (Repository)": repository.find_by_id(1)
"UserRepository (Repository)"->Engine: engine.selection
Engine->"Selection (Operation)": new("users")
Engine<--"Selection (Operation)": selection
"UserRepository (Repository)"<--Engine: engine
"UserRepository (Repository)"->Engine: engine.where({ id: 1 })
Engine->"Selection (Operation)": selection.where({ id: 1 })
"Selection (Operation)"->"Filter (Capability)": self.where({ id: 1 })
"Selection (Operation)"<--"Filter (Capability)": selection
Engine<--"Selection (Operation)": selection
"UserRepository (Repository)"<--Engine: engine
"UserRepository (Repository)"->Engine: engine.perform
Engine->Driver: driver.run(selection)
Engine<--Driver:  { id: 1 }
"UserRepository (Repository)"<--Engine: { id: 1 }
"UserRepository (Repository)"->"SetterTransformer (Transformer)": transformer.one({ id: 1 })
"SetterTransformer (Transformer)"->"User (Entity)": new
"SetterTransformer (Transformer)"<--"User (Entity)": user
"SetterTransformer (Transformer)"->"User (Entity)": user.id=(1)
"UserRepository (Repository)"<--"SetterTransformer (Transformer)": "#User @id=1"
Client<--"UserRepository (Repository)": "#User @id=1"
